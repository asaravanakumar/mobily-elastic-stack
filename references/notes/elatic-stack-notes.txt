What is Elasticsearch?
          - Open source scalable search engine. It indexes, stores and helps to retrieve/search and analyse the data.
What is ELK stack?
	- Elasticsearch, Logstash and Kibana
What is Elastic stack?
	- ELK + Beats + Xpack + etc.


Cluster - collection of nodes 
Node    -  physical server or vm where ES instance running


Index - collection of documents
Document - individual record be stored
Shard - partitions and distributes documents stored in the index
Replication - 3x -> N -1 failures

10 nodes -> 10 shards -> how many shard be there in each node? -> 1 shards in each node 
10 nodes -> 10 shards with 3x replication -> how many shards be there in each node? -> 3 shards in each node

Elasticsearch installation & Setup

Indexing - process of loading / storing the data into ES
Search   - process of retrieving the data from ES

Indexing sample dataset (Shakespeare)

STEP 1: Create an index - no of shards, replication, mapping, analyzer
STEP 2: Create or Load documents into index
STEP 3: Search documents - uri search, phrase search, multi match search, full text search, filtering, sorting, pagination, etc..

REST API

	POST	- Create Document
	GET	- Fetch Documents
	PUT	- Update Document
	DELETE	- Delete Document

REST Client - Curl, Postman

{
_id: “100”,
message: “Router Connection Error”,
marker-type:”ERROR”
“eventTime”:”2022/12/20 13:00:00”
}

{
_id: “101”,
message: “Device Connection Error”
}

{
_id: “102”,
message: “Connection Successful”
}

{
_id: “103”,
message: “Connection Failed”
}


INVERTED INDEX

Router		100
Connection	100, 101, 102, 103

# Stemming
Connect		100, 101, 102, 103
Connected	100, 101, 102, 103
Connecting	100, 101, 102, 103
Connections	100, 101, 102, 103

# Synonyms
Link			100, 101, 102, 103
Bond		100, 101, 102, 103

#N Gram - 2
Er, rr, ro, or

# N Gram Edge
E			100, 101
Er			100, 101
Err			100, 101
Erro			100, 101
Error		100, 101


Device		101
Successful	102
Failed		103

_search?q=message.keyword:”Router Connection Error”

Relevance / Scoring



Mapping
	- scheme definition for an index
	- Static Mapping / Explicit Mapping
	- Dynamic Mapping

Data Types
		- Integer
		- Long
		- Float
		- Double
		- Boolean
		- Keyword
		- Text
		- Date
		- IP
		- Object

Analyzer
	- Used for text analysis
		
	- Character Filter => Does encoding, remove HTML tags, etc..
	- Tokenzier => Tokenize the text
	- Token Filter => Case incentive, Stemming, Synonyms, Stop words
		
	- Built In Analyzers
		- Standard
		- Whitespace Analyser
		- Language -> English
		
		connection, connections, connected, connecting, connect
		link, add, attach, join, etc.

	{
		_id: “100”,
		message: “<html><body>Router Connection Error</body></html>”,
		marker-type:”ERROR”
		“eventTime”:”2022/12/20 13:00:00”
	}


	INPUT: <html><body>Router is having a Connection Error</body></html>

	Character Filter
			IN	: <html><body>Router Connection Error</body></html>
			OUT: Router Connection Error
	Tokenizer
			IN	: Router Connection Error
			OUT: 
				Router
				Connection
				Error
				is
				having
				a
	Token Filter
			IN	: 
				Router
			OUT :
				router
				routers
				routing
				modem
				switch

			IN	: 
				Connection
			OUT :
				connection
				connections
				connected
				link
				join

			IN	: 
				Error
			OUT :
				error
				errors
				errored
				failure
				mistake

				
	Search
		- URI Search
		- Phrase Search
		- Term Search
		- Query/Filter Search
		- Full Text / Fuzzy Search
		- Prefix Search
		- Wildcard Search
		- Auto Complete Search
		

		“connection error”

		“conn”

		“*nec*”

		con
		conn
		connect
		connection

		“connection error” slop=2 
		“fail” fuzziness=1
		“of” fuzziness=0
		“error” fuzziness=1
		“connection” fuzziness=2
		[0] ->  upto 2 letters
		[1] -> 3 to 5 letters
		[2] -> > 5 letters

		Query DSL
		{
			“query”: {
				“match”: {
					“message” : “connection error”,
					“device-id”: “”
				}
			}
		}		

Kibana
	- Search, Analyse and Visualise the data stored in the ES
	
	STEP 1: Go to Stack Management
	STEP 2: Create Data View
	STEP 3: Discover Data View
	STEP 4: Search / Analyse / Visualize


Logstash

	What is Logstash?
		Collects, Parse, Transforms and Ingests data into Elasticsearch

	Logstash Setup

	Logstash Architecture
		Source
			- File, DB, Webservice, Stream, Messaging system, etc.
		Filter
			- Parse, Transform, Pre Process [GROK filters]	
		Destination
			- File, DB, Elasticsearch, Messaging system, etc..

	logstash.conf | movies-csv.conf
		input
		filter
		output

	Run Logstash to index Movies CSV dataset

	Run Logstash to index CDR CSV dataset

	Sample Router Log

	-300101-00:00:43.886608 [mod=DHCPMGR, lvl=INFO] [tid=4172] Connect to bus daemon... [UNSTRUCTURED]

	%{TIMESTAMP:eventTime} [%{WORD:module} %{LOGLEVEL:marker}] [%{NUMBER:tid}] %{WORD:message}


[STRUCTURED]
{	
	“marker”: “INFO”,
	“tid”: 4172,
	“module”: “DHCPMGR”
	“eventTime”: “300101-00:00:43.886608”,
	“message”: “Connect to bus daemon”
}



    {
        "_index": "movies-csv",
        "_id": "Gb6CPYUBKbLCyLSZ9JhB",
        "_score": 1,
        "_source": {
          "movieid": "2024",
          "title": "Rapture, The (1991)",
          "@version": "1",
          "message": """2024,"Rapture, The (1991)",Drama|Mystery
""",
          "@timestamp": "2022-12-23T05:44:28.056198855Z",
          "genres": "Drama|Mystery",
          "event": {
            "original": """2024,"Rapture, The (1991)",Drama|Mystery
"""
          },
          "host": {
            "name": "ip-172-31-82-74"
          },
          "log": {
            "file": {
              "path": "/home/ubuntu/movies.csv"
            }
          }
        }

%{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}

COMBINEDAPACHELOG

{	
	“clientip”: “216.244.66.246 ”,
	“agent”: “Mozilla/5.0 (compatible; DotBot/1.1; http://www.opensiteexplorer.org/dotbot, help@moz.com)”
	“timestamp”: “30/Apr/2017:04:28:11 +0000,
	“message”: “GET /docs/triton/pages.html HTTP/1.1" 200 5639”
}
